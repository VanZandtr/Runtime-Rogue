<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Roguelite</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, #0f0f23, #1a1a2e);
            color: #cccccc;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #f7b32b;
            font-size: 2.5rem;
            text-shadow: 0 0 20px rgba(247, 179, 43, 0.3);
            margin-bottom: 10px;
        }

        .game-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(26, 26, 46, 0.8);
            border: 1px solid #444;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            backdrop-filter: blur(10px);
        }

        .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            color: #f7b32b;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #888;
            margin-top: 5px;
        }

        .game-area {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .section {
            background: rgba(26, 26, 46, 0.8);
            border: 1px solid #444;
            border-radius: 12px;
            padding: 20px;
            backdrop-filter: blur(10px);
        }

        .section h3 {
            color: #f7b32b;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .blocks-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            min-height: 100px;
            margin-bottom: 15px;
        }

        .block {
            background: linear-gradient(135deg, #2a2a4a, #1a1a3a);
            border: 2px solid #444;
            border-radius: 8px;
            padding: 12px;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            min-width: 100px;
        }

        .block:hover {
            transform: translateY(-2px);
            border-color: #f7b32b;
            box-shadow: 0 4px 15px rgba(247, 179, 43, 0.2);
        }

        .block.rarity-common {
            border-left: 4px solid #888;
        }

        .block.rarity-uncommon {
            border-left: 4px solid #4ade80;
        }

        .block.rarity-rare {
            border-left: 4px solid #a78bfa;
        }

        .block.rarity-legendary {
            border-left: 4px solid #f59e0b;
        }

        .block-name {
            font-weight: bold;
            color: #fff;
            margin-bottom: 5px;
        }

        .block-params {
            font-size: 0.8rem;
            color: #aaa;
        }

        .block-description {
            font-size: 0.7rem;
            color: #999;
            margin-top: 5px;
        }

        .program-block {
            background: linear-gradient(135deg, #3a3a5a, #2a2a4a);
            border-left: 4px solid #f7b32b;
            position: relative;
        }

        .program-block.executing {
            animation: glow 0.8s infinite alternate;
        }

        @keyframes glow {
            from { box-shadow: 0 0 5px rgba(247, 179, 43, 0.3); }
            to { box-shadow: 0 0 20px rgba(247, 179, 43, 0.8); }
        }

        .line-number {
            position: absolute;
            left: -25px;
            top: 50%;
            transform: translateY(-50%);
            background: #f7b32b;
            color: #000;
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 3px;
            font-weight: bold;
        }

        .controls {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn {
            background: linear-gradient(135deg, #f7b32b, #e6a020);
            color: #000;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s;
            font-family: inherit;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(247, 179, 43, 0.3);
        }

        .btn:disabled {
            background: #444;
            color: #888;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #666, #555);
            color: #fff;
        }

        .log-section {
            grid-column: 1 / -1;
        }

        .log-content {
            background: #0a0a0a;
            border: 1px solid #333;
            border-radius: 6px;
            padding: 15px;
            height: 200px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .log-entry {
            margin-bottom: 5px;
        }

        .log-entry.success {
            color: #4ade80;
        }

        .log-entry.error {
            color: #ef4444;
        }

        .log-entry.info {
            color: #60a5fa;
        }

        .lives-container {
            display: flex;
            gap: 5px;
            justify-content: center;
        }

        .life {
            width: 20px;
            height: 20px;
            background: #ef4444;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
        }

        .life.lost {
            background: #444;
            color: #666;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #333;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 5px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #f7b32b, #e6a020);
            transition: width 0.3s;
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            padding: 20px;
        }

        .modal-content {
            background: linear-gradient(135deg, #1a1a2e, #0f0f23);
            border: 2px solid #f7b32b;
            border-radius: 12px;
            padding: 30px;
            max-width: 600px;
            width: 100%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal h2 {
            color: #f7b32b;
            text-align: center;
            margin-bottom: 20px;
        }

        .class-choices {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .class-choice {
            background: rgba(26, 26, 46, 0.8);
            border: 2px solid #444;
            border-radius: 8px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.2s;
            text-align: center;
        }

        .class-choice:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .class-blocks {
            display: flex;
            gap: 5px;
            justify-content: center;
            margin-top: 15px;
        }

        .class-block-preview {
            background: #2a2a4a;
            border-left: 3px solid;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 0.8rem;
        }

        .reward-choices {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .reward-choice {
            background: rgba(26, 26, 46, 0.8);
            border: 2px solid #444;
            border-radius: 8px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .reward-choice:hover {
            transform: translateY(-2px);
            border-color: #f7b32b;
        }

        .reward-title {
            font-weight: bold;
            color: #fff;
            margin-bottom: 10px;
        }

        .reward-description {
            color: #aaa;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .game-area {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .game-stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>CODE ROGUELITE</h1>
            <p>Build programs to reach your goals and ascend the towers of code</p>
        </div>

        <div class="game-stats">
            <div class="stat-card">
                <div class="stat-value" id="goal-value">10</div>
                <div class="stat-label">GOAL</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="current-value">0</div>
                <div class="stat-label">CURRENT</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">F<span id="floor-number">1</span> R<span id="round-number">1</span></div>
                <div class="stat-label">FLOOR / ROUND</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="score-value">0</div>
                <div class="stat-label">SCORE</div>
            </div>
            <div class="stat-card">
                <div class="lives-container" id="lives-container"></div>
                <div class="stat-label">LIVES</div>
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
                </div>
            </div>
        </div>

        <div class="game-area">
            <div class="section">
                <h3>📦 Available Blocks</h3>
                <div class="blocks-container" id="available-blocks"></div>
                <p style="color: #888; font-size: 0.8rem;">Click blocks to add them to your program</p>
            </div>

            <div class="section">
                <h3>⚙️ Your Program</h3>
                <div class="blocks-container" id="program-blocks"></div>
                <div class="controls">
                    <button class="btn" id="run-program">▶️ RUN</button>
                    <button class="btn btn-secondary" id="reset-program">🗑️ CLEAR</button>
                </div>
            </div>

            <div class="section log-section">
                <h3>📋 Execution Log</h3>
                <div class="log-content" id="log-content"></div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div class="modal" id="reward-modal">
        <div class="modal-content">
            <h2>🎁 Choose Your Reward</h2>
            <div class="reward-choices" id="reward-choices"></div>
        </div>
    </div>

    <script>
        // Game state
        const gameState = {
            currentValue: 0,
            goalValue: 10,
            round: 1,
            floor: 1,
            score: 0,
            lives: 3,
            maxLives: 3,
            availableBlocks: [],
            programBlocks: [],
            executionPointer: 0,
            isExecuting: false,
            executionSpeed: 800,
            executionTimer: null,
            selectedClass: null,
            gameOver: false,
            floorProgress: 0,
            floorGoal: 3,
            registers: { A: 0, B: 0, C: 0 },
            executionHistory: [],
            loopStack: [] // Fix for nested loops
        };

        // Block types with better organization
        const blockTypes = {
            // Control Flow
            GOTO: 'goto',
            IF_GREATER: 'if_greater',
            IF_EQUAL: 'if_equal',
            LOOP: 'loop',
            
            // Arithmetic
            ADD: 'add',
            SUBTRACT: 'subtract',
            MULTIPLY: 'multiply',
            DIVIDE: 'divide',
            MODULO: 'modulo',
            
            // Random/Chance
            DICE: 'dice',
            COIN: 'coin',
            RANDOM: 'random',
            LUCKY: 'lucky',
            
            // Advanced
            STORE: 'store',
            LOAD: 'load',
            DOUBLE: 'double',
            RESET: 'reset'
        };

        // Character classes with more distinct abilities
        const characterClasses = {
            HACKER: {
                name: 'Hacker',
                description: 'Masters of control flow and program manipulation. Executes 25% faster.',
                startingBlocks: [blockTypes.GOTO, blockTypes.IF_GREATER, blockTypes.ADD],
                bonus: 'execution_speed',
                color: '#f38ba8'
            },
            MATHEMATICIAN: {
                name: 'Mathematician',
                description: 'Excels at arithmetic operations. Starts with higher goals for more points.',
                startingBlocks: [blockTypes.ADD, blockTypes.MULTIPLY, blockTypes.DIVIDE],
                bonus: 'score_multiplier',
                color: '#a6e3a1'
            },
            GAMBLER: {
                name: 'Gambler',
                description: 'Embraces chaos and chance. Starts with extra life and luck blocks.',
                startingBlocks: [blockTypes.DICE, blockTypes.COIN, blockTypes.LUCKY],
                bonus: 'extra_life',
                color: '#cba6f7'
            }
        };

        // Fixed block definitions with proper execution logic
        const blockDefinitions = {
            [blockTypes.GOTO]: {
                name: 'GOTO',
                description: 'Jump to a specific line in your program',
                rarity: 'common',
                execute: (block, state) => {
                    const targetLine = block.params.line;
                    if (targetLine >= 1 && targetLine <= state.programBlocks.length) {
                        state.executionPointer = targetLine - 1;
                        return `Jumping to line ${targetLine}`;
                    } else {
                        return `Invalid jump target: line ${targetLine}`;
                    }
                },
                createParams: (programLength = 3) => ({ 
                    line: Math.floor(Math.random() * Math.max(1, Math.min(5, programLength))) + 1 
                })
            },
            
            [blockTypes.ADD]: {
                name: 'ADD',
                description: 'Add a value to current total',
                rarity: 'common',
                execute: (block, state) => {
                    const value = block.params.value;
                    state.currentValue += value;
                    return `Added ${value}, total: ${state.currentValue}`;
                },
                createParams: () => ({ value: Math.floor(Math.random() * 6) + 1 })
            },
            
            [blockTypes.SUBTRACT]: {
                name: 'SUB',
                description: 'Subtract a value from current total',
                rarity: 'common',
                execute: (block, state) => {
                    const value = block.params.value;
                    state.currentValue -= value;
                    return `Subtracted ${value}, total: ${state.currentValue}`;
                },
                createParams: () => ({ value: Math.floor(Math.random() * 4) + 1 })
            },
            
            [blockTypes.MULTIPLY]: {
                name: 'MUL',
                description: 'Multiply current value by amount',
                rarity: 'uncommon',
                execute: (block, state) => {
                    const value = block.params.value;
                    state.currentValue *= value;
                    return `Multiplied by ${value}, total: ${state.currentValue}`;
                },
                createParams: () => ({ value: Math.floor(Math.random() * 3) + 2 })
            },
            
            [blockTypes.DIVIDE]: {
                name: 'DIV',
                description: 'Divide current value (rounded down)',
                rarity: 'uncommon',
                execute: (block, state) => {
                    const value = block.params.value;
                    if (value === 0) return 'Error: Division by zero';
                    state.currentValue = Math.floor(state.currentValue / value);
                    return `Divided by ${value}, total: ${state.currentValue}`;
                },
                createParams: () => ({ value: Math.floor(Math.random() * 3) + 2 })
            },
            
            [blockTypes.DICE]: {
                name: 'DICE',
                description: 'Roll dice and add result',
                rarity: 'common',
                execute: (block, state) => {
                    const sides = block.params.sides;
                    const count = block.params.count;
                    let total = 0;
                    const rolls = [];
                    
                    for (let i = 0; i < count; i++) {
                        const roll = Math.floor(Math.random() * sides) + 1;
                        rolls.push(roll);
                        total += roll;
                    }
                    
                    state.currentValue += total;
                    return `Rolled ${count}d${sides}: [${rolls.join(', ')}] = +${total}, total: ${state.currentValue}`;
                },
                createParams: () => {
                    const options = [
                        { count: 1, sides: 6 },
                        { count: 2, sides: 4 },
                        { count: 1, sides: 8 },
                        { count: 3, sides: 3 }
                    ];
                    return options[Math.floor(Math.random() * options.length)];
                }
            },
            
            [blockTypes.COIN]: {
                name: 'COIN',
                description: 'Flip coin: heads = add, tails = subtract',
                rarity: 'common',
                execute: (block, state) => {
                    const value = block.params.value;
                    const isHeads = Math.random() < 0.5;
                    
                    if (isHeads) {
                        state.currentValue += value;
                        return `Heads! Added ${value}, total: ${state.currentValue}`;
                    } else {
                        state.currentValue -= value;
                        return `Tails! Subtracted ${value}, total: ${state.currentValue}`;
                    }
                },
                createParams: () => ({ value: Math.floor(Math.random() * 4) + 2 })
            },
            
            [blockTypes.RANDOM]: {
                name: 'RNG',
                description: 'Add random value in range',
                rarity: 'uncommon',
                execute: (block, state) => {
                    const min = block.params.min;
                    const max = block.params.max;
                    const value = Math.floor(Math.random() * (max - min + 1)) + min;
                    state.currentValue += value;
                    return `Random ${min}-${max}: +${value}, total: ${state.currentValue}`;
                },
                createParams: () => {
                    const min = Math.floor(Math.random() * 3) + 1;
                    const max = min + Math.floor(Math.random() * 8) + 3;
                    return { min, max };
                }
            },
            
            [blockTypes.LUCKY]: {
                name: 'LUCKY',
                description: '30% chance for big bonus, 70% small bonus',
                rarity: 'rare',
                execute: (block, state) => {
                    const isLucky = Math.random() < 0.3;
                    const value = isLucky ? block.params.bigValue : block.params.smallValue;
                    state.currentValue += value;
                    return isLucky ? 
                        `LUCKY! +${value}, total: ${state.currentValue}` :
                        `Small luck: +${value}, total: ${state.currentValue}`;
                },
                createParams: () => ({
                    smallValue: Math.floor(Math.random() * 3) + 1,
                    bigValue: Math.floor(Math.random() * 8) + 8
                })
            },
            
            [blockTypes.IF_GREATER]: {
                name: 'IF>',
                description: 'Execute next line only if current > threshold',
                rarity: 'uncommon',
                execute: (block, state) => {
                    const threshold = block.params.threshold;
                    if (state.currentValue > threshold) {
                        return `${state.currentValue} > ${threshold}: TRUE, executing next line`;
                    } else {
                        // Skip will be handled by execution engine
                        return `${state.currentValue} > ${threshold}: FALSE, skipping next line`;
                    }
                },
                createParams: () => ({ threshold: Math.floor(Math.random() * 15) + 5 })
            },
            
            [blockTypes.IF_EQUAL]: {
                name: 'IF=',
                description: 'Execute next line only if current equals target',
                rarity: 'rare',
                execute: (block, state) => {
                    const target = block.params.target;
                    if (state.currentValue === target) {
                        return `${state.currentValue} = ${target}: TRUE, executing next line`;
                    } else {
                        // Skip will be handled by execution engine
                        return `${state.currentValue} = ${target}: FALSE, skipping next line`;
                    }
                },
                createParams: () => ({ target: Math.floor(Math.random() * 20) + 5 })
            },
            
            [blockTypes.DOUBLE]: {
                name: 'DOUBLE',
                description: 'Double the current value',
                rarity: 'rare',
                execute: (block, state) => {
                    const oldValue = state.currentValue;
                    state.currentValue *= 2;
                    return `Doubled ${oldValue} → ${state.currentValue}`;
                },
                createParams: () => ({})
            },
            
            [blockTypes.RESET]: {
                name: 'RESET',
                description: 'Set current value to 0',
                rarity: 'uncommon',
                execute: (block, state) => {
                    const oldValue = state.currentValue;
                    state.currentValue = 0;
                    return `Reset ${oldValue} → 0`;
                },
                createParams: () => ({})
            }
        };

        // DOM Elements
        const elements = {
            goalValue: document.getElementById('goal-value'),
            currentValue: document.getElementById('current-value'),
            roundNumber: document.getElementById('round-number'),
            floorNumber: document.getElementById('floor-number'),
            scoreValue: document.getElementById('score-value'),
            livesContainer: document.getElementById('lives-container'),
            progressFill: document.getElementById('progress-fill'),
            availableBlocks: document.getElementById('available-blocks'),
            programBlocks: document.getElementById('program-blocks'),
            runProgram: document.getElementById('run-program'),
            resetProgram: document.getElementById('reset-program'),
            logContent: document.getElementById('log-content'),
            rewardModal: document.getElementById('reward-modal'),
            rewardChoices: document.getElementById('reward-choices')
        };

        // Initialize the game
        function initGame() {
            showClassSelection();
        }

        // Show class selection screen
        function showClassSelection() {
            const modal = document.createElement('div');
            modal.id = 'class-selection-modal';
            modal.className = 'modal';
            modal.style.display = 'flex';
            
            const content = document.createElement('div');
            content.className = 'modal-content';
            content.innerHTML = `
                <h2>Choose Your Programming Style</h2>
                <p>Each class offers unique blocks and abilities:</p>
            `;
            
            const choices = document.createElement('div');
            choices.className = 'class-choices';
            
            Object.keys(characterClasses).forEach(classKey => {
                const classData = characterClasses[classKey];
                const classElement = document.createElement('div');
                classElement.className = 'class-choice';
                classElement.style.borderColor = classData.color;
                classElement.innerHTML = `
                    <h3 style="color: ${classData.color}">${classData.name}</h3>
                    <p>${classData.description}</p>
                    <div class="class-blocks">
                        ${classData.startingBlocks.map(blockType => 
                            `<div class="class-block-preview" style="border-left-color: ${classData.color}">
                                ${blockDefinitions[blockType].name}
                            </div>`
                        ).join('')}
                    </div>
                `;
                classElement.addEventListener('click', () => selectClass(classKey));
                choices.appendChild(classElement);
            });
            
            content.appendChild(choices);
            modal.appendChild(content);
            document.body.appendChild(modal);
        }

        // Select a class and start the game
        function selectClass(classKey) {
            gameState.selectedClass = classKey;
            document.getElementById('class-selection-modal').remove();
            
            const classData = characterClasses[classKey];
            
            // Create starting blocks
            gameState.availableBlocks = classData.startingBlocks.map(blockType => createBlock(blockType));
            
            // Apply class bonuses
            switch (classData.bonus) {
                case 'execution_speed':
                    gameState.executionSpeed = 600; // 25% faster
                    break;
                case 'score_multiplier':
                    gameState.goalValue = 15; // Higher starting goal
                    break;
                case 'extra_life':
                    gameState.lives = 4;
                    gameState.maxLives = 4;
                    break;
            }
            
            updateUI();
            setupEventListeners();
            addLogEntry(`Welcome, ${classData.name}! Your coding adventure begins...`);
        }

        // Create a new block with better parameter generation
        function createBlock(type) {
            const definition = blockDefinitions[type];
            return {
                id: Math.random().toString(36).substr(2, 9),
                type,
                name: definition.name,
                description: definition.description,
                rarity: definition.rarity,
                params: definition.createParams(gameState.programBlocks.length)
            };
        }

        // Fixed execution engine
        function runProgram() {
            if (gameState.programBlocks.length === 0) {
                addLogEntry('Program is empty! Add some code blocks first.');
                return;
            }
            
            gameState.isExecuting = true;
            gameState.executionPointer = 0;
            gameState.currentValue = 0;
            gameState.loopStack = [];
            gameState.executionHistory = [];
            
            elements.runProgram.disabled = true;
            elements.resetProgram.disabled = true;
            
            clearLog();
            addLogEntry('=== PROGRAM START ===');
            updateUI();
            
            executeNextStep();
        }

        // Fixed execution step with proper control flow
        function executeNextStep() {
            if (!gameState.isExecuting) return;
            
            // Check bounds
            if (gameState.executionPointer >= gameState.programBlocks.length || gameState.executionPointer < 0) {
                endExecution();
                return;
            }
            
            const block = gameState.programBlocks[gameState.executionPointer];
            const definition = blockDefinitions[block.type];
            
            // Clear previous execution highlighting
            document.querySelectorAll('.program-block').forEach(el => el.classList.remove('executing'));
            